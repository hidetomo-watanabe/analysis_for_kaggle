{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "%reload_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "from logging import getLogger, StreamHandler, INFO\n",
    "# import logging.config\n",
    "# logging.config.fileConfig(\n",
    "    # './configs/logging.conf', disable_existing_loggers=False)\n",
    "logger = getLogger('analyze')\n",
    "handler = StreamHandler(sys.stdout)\n",
    "handler.setLevel(INFO)\n",
    "logger.addHandler(handler)\n",
    "logger.setLevel(INFO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "config_path = './configs/config.json'\n",
    "config_text = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from modules.DataTranslater import DataTranslater\n",
    "translater_obj = DataTranslater()\n",
    "translater_obj.read_config_file(config_path)\n",
    "# translater_obj.read_config_text(config_text)\n",
    "translater_obj.get_translater()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger.info('### TRANSLATE')\n",
    "translater_obj.calc_train_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### WRITE TRAIN DATA')\n",
    "translater_obj.write_train_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### GET TRAIN DATA')\n",
    "train_data = translater_obj.get_train_data()\n",
    "post_processers = translater_obj.get_post_processers()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from modules.Visualizer import Visualizer\n",
    "visualizer_obj = Visualizer()\n",
    "visualizer_obj.read_config_file(config_path)\n",
    "# visualizer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### GET RAW DATA')\n",
    "raw_data = translater_obj.get_raw_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### DISPLAY DATA')\n",
    "visualizer_obj.display_data(\n",
    "    raw_data['train_df'].sample(frac=1, replace=False, random_state=42),\n",
    "    raw_data['test_df'].sample(frac=1, replace=False, random_state=42),\n",
    "    raw_data['pred_df'].sample(frac=1, replace=False, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### TRAIN PROFILING')\n",
    "import pandas_profiling\n",
    "pandas_profiling.ProfileReport(\n",
    "    raw_data['train_df'].sample(frac=1, replace=False, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### TEST PROFILING')\n",
    "import pandas_profiling\n",
    "pandas_profiling.ProfileReport(\n",
    "    raw_data['test_df'].sample(frac=1, replace=False, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### PLOT TRAIN PRED HISTOGRAM')\n",
    "visualizer_obj.plot_train_pred_histogram(\n",
    "    raw_data['train_df'].sample(frac=1, replace=False, random_state=42),\n",
    "    raw_data['pred_df'].sample(frac=1, replace=False, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### PLOT TRAIN TEST HISTOGRAM')\n",
    "visualizer_obj.plot_train_test_histogram(\n",
    "    raw_data['train_df'].sample(frac=1, replace=False, random_state=42),\n",
    "    raw_data['test_df'].sample(frac=1, replace=False, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### TRAIN SCATTER MATRIX')\n",
    "visualizer_obj.plot_train_scatter_matrix(\n",
    "    train_data['X_train'].toarray(), train_data['Y_train'],\n",
    "    train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### TEST SCATTER MATRIX')\n",
    "visualizer_obj.plot_test_scatter_matrix(\n",
    "    train_data['X_test'].toarray(),\n",
    "    train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### PLOT TRAIN CORRCOEF')\n",
    "visualizer_obj.plot_train_corrcoef(\n",
    "    train_data['X_train'].toarray(), train_data['Y_train'],\n",
    "    train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### PLOT TEST CORRCOEF')\n",
    "visualizer_obj.plot_test_corrcoef(\n",
    "    train_data['X_test'].toarray(),\n",
    "    train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE DECISION TREE')\n",
    "visualizer_obj.visualize_decision_tree(\n",
    "    train_data['X_train'].toarray(), train_data['Y_train'],\n",
    "    train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from modules.Trainer import Trainer\n",
    "trainer_obj = Trainer(**train_data)\n",
    "trainer_obj.read_config_file(config_path)\n",
    "# trainer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### FIT')\n",
    "trainer_obj.calc_estimator()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### WRITE ESTIMATOR DATA')\n",
    "trainer_obj.write_estimator_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### GET ESTIMATOR DATA')\n",
    "estimator_data = trainer_obj.get_estimator_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE PARTIAL DEPENDENCE')\n",
    "from sklearn.inspection import plot_partial_dependence\n",
    "for feature in train_data['feature_columns']:\n",
    "    plot_partial_dependence(\n",
    "        estimator=estimator_data['estimator'], X=train_data['X_train'].toarray(),\n",
    "        features=[feature], feature_names=[feature])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE SHAP')\n",
    "import shap\n",
    "shap.initjs()\n",
    "explainer = shap.TreeExplainer(\n",
    "    model=estimator_data['estimator'], feature_perturbation='tree_path_dependent',\n",
    "    model_output='margin')\n",
    "shap_values = explainer.shap_values(\n",
    "    X=train_data['X_train'].toarray(), y=train_data['Y_train'])\n",
    "shap.summary_plot(\n",
    "    shap_values, train_data['X_train'].toarray(),\n",
    "    feature_names=train_data['feature_columns'])\n",
    "# shap.summary_plot(\n",
    "    # shap_values, train_data['X_train'].toarray(),\n",
    "    # feature_names=train_data['feature_columns'],\n",
    "    # plot_type=\"bar\")\n",
    "shap.force_plot(\n",
    "    base_value=explainer.expected_value, shap_values=shap_values,\n",
    "    feature_names=train_data['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE LEARNING CURVES')\n",
    "for config, estimator in estimator_data['single_estimators']:\n",
    "    title = 'learning curves: %s' % config['modelname']\n",
    "    visualizer_obj.plot_learning_curve(\n",
    "        title, estimator,\n",
    "        train_data['X_train'], train_data['Y_train'],\n",
    "        estimator_data['scorer'], estimator_data['cv'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from modules.Outputer import Outputer\n",
    "outputer_obj = Outputer(\n",
    "    **train_data, **estimator_data, **post_processers)\n",
    "outputer_obj.read_config_file(config_path)\n",
    "# outputer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### PREDICT')\n",
    "outputer_obj.predict_y()\n",
    "outputer_obj.calc_predict_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE Y TRAIN PRED DATA')\n",
    "pred_data = outputer_obj.get_predict_data()\n",
    "visualizer_obj.plot_y_train_pred_data(\n",
    "    train_data['Y_train'], pred_data['Y_train_pred'].reshape(-1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### WRITE PREDICT DATA')\n",
    "outputer_obj.write_predict_data()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
