{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "config_path = './configs/config.json'\n",
    "config_text = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import logging.config\n",
    "from logging import getLogger\n",
    "sys.path.append('./modules')\n",
    "from modules.DataTranslater import DataTranslater\n",
    "from modules.Visualizer import Visualizer\n",
    "from modules.Trainer import Trainer\n",
    "from modules.Outputer import Outputer\n",
    "\n",
    "logging.config.fileConfig(\n",
    "    './configs/logging.conf', disable_existing_loggers=False)\n",
    "logger = getLogger('predict')\n",
    "\n",
    "%matplotlib inline\n",
    "%reload_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "translater_obj = DataTranslater()\n",
    "translater_obj.read_config_file(config_path)\n",
    "# translater_obj.read_config_text(config_text)\n",
    "translater_obj.get_translater()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### DATA FOR VIEW')\n",
    "translater_obj.create_data_for_view()\n",
    "translater_obj.display_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### TRANSLATE DATA FOR VIEW')\n",
    "translater_obj.translate_data_for_view()\n",
    "translater_obj.display_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### WRITE DATA FOR VIEW')\n",
    "translater_obj.write_data_for_view()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### GET DATA FOR VIEW')\n",
    "data_for_view = translater_obj.get_data_for_view()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### DATA FOR MODEL')\n",
    "translater_obj.create_data_for_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### TRANSLATE DATA FOR MODEL')\n",
    "translater_obj.translate_data_for_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### GET DATA FOR MODEL')\n",
    "data_for_model = translater_obj.get_data_for_model()\n",
    "post_processers = translater_obj.get_post_processers()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "visualizer_obj = Visualizer()\n",
    "visualizer_obj.read_config_file(config_path)\n",
    "# visualizer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE TRAIN DF HISTOGRAM')\n",
    "visualizer_obj.visualize_train_df_histogram(\n",
    "    data_for_view['train_df'].sample(frac=1, random_state=42),\n",
    "    data_for_view['pred_df'].sample(frac=1, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE TRAIN DF HEATMAP')\n",
    "# display(data_for_view['train_df'].drop(visualizer_obj.id_col, axis=1).corr())\n",
    "visualizer_obj.visualize_train_df_heatmap(\n",
    "    data_for_view['train_df'].sample(frac=1, random_state=42),\n",
    "    data_for_view['pred_df'].sample(frac=1, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE TRAIN DF SCATTER MATRIX')\n",
    "import pandas as pd\n",
    "pd.plotting.scatter_matrix(data_for_view['train_df'].sample(frac=1, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE TRAIN DF PROFILING')\n",
    "import pandas_profiling\n",
    "pandas_profiling.ProfileReport(data_for_view['train_df'].sample(frac=1, random_state=42))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainer_obj = Trainer(**data_for_model)\n",
    "trainer_obj.read_config_file(config_path)\n",
    "# trainer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### FIT')\n",
    "trainer_obj.calc_estimator()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### WRITE ESTIMATOR DATA')\n",
    "trainer_obj.write_estimator_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### GET ESTIMATOR DATA')\n",
    "estimator_data = trainer_obj.get_estimator_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE PARTIAL DEPENDENCE')\n",
    "from sklearn.inspection import plot_partial_dependence\n",
    "plot_partial_dependence(\n",
    "    estimator=estimator_data['estimator'], X=data_for_model['X_train'].toarray(),\n",
    "    features=data_for_model['feature_columns'],\n",
    "    feature_names=data_for_model['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE SHAP')\n",
    "import shap\n",
    "shap.initjs()\n",
    "explainer = shap.TreeExplainer(\n",
    "    model=estimator_data['estimator'], feature_dependence='tree_path_dependent',\n",
    "    model_output='margin')\n",
    "shap_values = explainer.shap_values(\n",
    "    X=data_for_model['X_train'].toarray(), y=data_for_model['Y_train'])\n",
    "shap.summary_plot(\n",
    "    shap_values, data_for_model['X_train'].toarray(),\n",
    "    feature_names=data_for_model['feature_columns'])\n",
    "# shap.summary_plot(\n",
    "    # shap_values, data_for_model['X_train'].toarray(),\n",
    "    # feature_names=data_for_model['feature_columns'],\n",
    "    # plot_type=\"bar\")\n",
    "shap.force_plot(\n",
    "    base_value=explainer.expected_value, shap_values=shap_values,\n",
    "    feature_names=data_for_model['feature_columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE LEARNING CURVES')\n",
    "for config, estimator in estimator_data['single_estimators']:\n",
    "    title = 'learning curves: %s' % config['modelname']\n",
    "    visualizer_obj.visualize_learning_curve(\n",
    "        title, estimator,\n",
    "        data_for_model['X_train'], data_for_model['Y_train'],\n",
    "        estimator_data['scorer'], estimator_data['cv'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "outputer_obj = Outputer(\n",
    "    **data_for_model, **estimator_data, **post_processers)\n",
    "outputer_obj.read_config_file(config_path)\n",
    "# outputer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### PREDICT')\n",
    "outputer_obj.predict_y()\n",
    "outputer_obj.calc_predict_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE Y TRAIN PRED DATA')\n",
    "pred_data = outputer_obj.get_predict_data()\n",
    "visualizer_obj.visualize_y_train_pred_data(\n",
    "    data_for_model['Y_train'], pred_data['Y_train_pred'].reshape(-1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### WRITE PREDICT DATA')\n",
    "outputer_obj.write_predict_data()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
