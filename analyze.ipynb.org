{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "config_path = './configs/config.json'\n",
    "config_text = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import logging.config\n",
    "from logging import getLogger\n",
    "sys.path.append('./modules')\n",
    "from modules.DataTranslater import DataTranslater\n",
    "from modules.Visualizer import Visualizer\n",
    "from modules.Predicter import Predicter\n",
    "\n",
    "logging.config.fileConfig(\n",
    "    './configs/logging.conf', disable_existing_loggers=False)\n",
    "logger = getLogger('predict')\n",
    "\n",
    "%matplotlib inline\n",
    "%reload_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "translater_obj = DataTranslater()\n",
    "translater_obj.read_config_file(config_path)\n",
    "# translater_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### DF DATA')\n",
    "translater_obj.create_df_data()\n",
    "translater_obj.display_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### TRANSLATE DF DATA')\n",
    "translater_obj.translate_df_data()\n",
    "translater_obj.display_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### DF DATA')\n",
    "df_data = translater_obj.get_df_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### DATA FOR MODEL')\n",
    "translater_obj.create_data_for_model()\n",
    "translater_obj.normalize_data_for_model()\n",
    "translater_obj.reduce_dimension_of_data_for_model()\n",
    "data_for_model = translater_obj.get_data_for_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "visualizer_obj = Visualizer()\n",
    "visualizer_obj.read_config_file(config_path)\n",
    "# visualizer_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE TRAIN DF HISTOGRAM')\n",
    "visualizer_obj.visualize_train_df_histogram(df_data['train_df'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE TRAIN DF HEATMAP')\n",
    "visualizer_obj.visualize_train_df_heatmap(df_data['train_df'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE TRAIN DF PROFILING')\n",
    "import pandas_profiling\n",
    "pandas_profiling.ProfileReport(df_data['train_df'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicter_obj = Predicter(**data_for_model)\n",
    "predicter_obj.read_config_file(config_path)\n",
    "# predicter_obj.read_config_text(config_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VALIDATE')\n",
    "predicter_obj.is_ok_with_adversarial_validation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### FIT')\n",
    "predicter_obj.calc_ensemble_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE LEARNING CURVES')\n",
    "estimator_data = predicter_obj.get_estimator_data()\n",
    "for config, estimator in estimator_data['single_estimators']:\n",
    "    title = 'learning curves: %s' % config['modelname']\n",
    "    visualizer_obj.visualize_learning_curve(\n",
    "        title, estimator,\n",
    "        data_for_model['X_train'], data_for_model['Y_train'],\n",
    "        estimator_data['scorer'], config['cv'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### PREDICT')\n",
    "predicter_obj.predict_y()\n",
    "predicter_obj.calc_predict_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### VISUALIZE Y TRAIN PRED DATA')\n",
    "pred_data = predicter_obj.get_predict_data()\n",
    "visualizer_obj.visualize_y_train_pred_data(\n",
    "    data_for_model['Y_train'], pred_data['Y_train_pred'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('### OUTPUT')\n",
    "predicter_obj.write_output()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
